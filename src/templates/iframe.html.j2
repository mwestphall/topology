<!--

To add a map layer use create a key

To add a view to this map you will want to Site.getMarker and
will want to adjust the Map.data which populates the select input and legend.


-->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>OSG Compute Map</title>
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.8.0/dist/leaflet.css"
       integrity="sha512-hoalWLoI8r4UszCkZ5kL8vayOGVae1oxXe/2A4AO6J9+580uKHDO3JdHb7NzwwzK5xr/Fs0W40kiNHxM9vyTtQ=="
       crossorigin=""/>

    <script src="https://unpkg.com/leaflet@1.8.0/dist/leaflet.js"
       integrity="sha512-BB3hKbKWOc9Ez/TAwyWxNXeoV9c1v6FIeYiBieIWkpLjauysF18NzgR1MBNBXf8/KABdlkX68nAhlwcDFLGPCQ=="
       crossorigin=""></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/dom-to-image/2.6.0/dom-to-image.js" integrity="sha512-wUa0ktp10dgVVhWdRVfcUO4vHS0ryT42WOEcXjVVF2+2rcYBKTY7Yx7JCEzjWgPV+rj2EDUr8TwsoWF6IoIOPg==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>

    <style>
        body {margin: 0;}

        #map { height: 100vh; width: 100vw; }

        #full-screen {
            padding: 6px 6px 4px 6px;
            position: absolute;
            left: 10px;
            bottom: 10px;
            z-index: 1000;
            border-radius: 5px;
            border: #3a3a3a solid 1px;
        }

        #full-screen > img {
            height: 24px;
            width: 24px;
        }

        #selection-container {
            display: flex;
            flex-direction: column;
            position: absolute;
            top: 10px;
            right: 10px;
            z-index: 1000;
        }

        #legend {
            position: absolute;
            background-color: white;
            padding: 2px 6px 0px 6px;
            bottom: 20px;
            right: 10px;
            z-index: 1000;
            border-radius: 5px;
            border: #3a3a3a solid 1px;
            font-size: 12px;
        }

        .legend-header {
            margin:0;
            font-size: 1rem;
        }

        .label-container {
            display: flex;
            flex-direction: column;
            padding-left: .2rem;
        }

        .label-node {
            font-size: 1rem;
        }

        .legend-image-container {
            display:flex;
        }

        .legend-image-container > img {
            margin: auto;
            height: 28px;
            width: 21px;
        }

        .select-container {
            border-radius: 5px;
            border: #3a3a3a solid 1px;
            background: white;
            margin-left: auto;
        }

        .resource-container.compute {
            background-color: #c5deea;
        }

        .resource-container.storage {
            background-color: #dfcce0;
        }

        .select-container > label {
            background: white;
            padding-left: 6px;
            font-size: 1rem;
            color: #3a3a3a;
        }

        .select-container > select {
            padding: 4px 6px;
            font-size: 1rem;
            border: 0;
        }

        .popup {
            max-height: 400px;
            overflow-y: auto;
        }

        .entry-container {
            display: flex;
            margin-bottom: 4px;
        }

        #legend > hr {
            margin: 0 0 .3rem 0;
        }

        .entry-container > span {
            font-size: .9rem;
            margin: auto 0;
            padding-left: 6px;
        }

        .site-card-header {
            margin: 0;
        }

        .facility-card-header {
            color: #717070;
            margin: 0;
        }

        .resource-group-header {
            border-radius: 5px;
            background: #3a3a3a;
            color: #dddddd;
            padding: 6px;
            margin: 10px 0 0 0;
        }

        .resource-container {
            border: 1px solid #ccc;
            padding: 6px;
            border-radius: 4px;
            margin: 1px 0;
            display: flex;
        }

        .resource-container > img {
            height: 16px;
            width: 16px;
        }

        .resource-container > span {
            padding-left: 8px;
        }

        #print-button {
            background: white;
            position: absolute;
            top: 10px;
            left: 55px;
            padding: 4px 6px;
            font-size: 1rem;
            border-radius: 5px;
            border: #3a3a3a solid 1px;
            z-index: 1000;
        }

        #site {
            max-width: 300px;
        }
    </style>
</head>
<body>
    <main id="main">
        <div id="print-region">
            <div id="map"></div>
            <div id="legend" class="leaflet-container" hidden>
                <h2 class="legend-header">Legend</h2>
                <hr>
                <div id="legend-items"></div>
            </div>
        </div>

        <button id="full-screen" onclick="toggleFullscreen()"><img alt="Outward arrows towards corners of square" src="../static/images/map/arrows-fullscreen.svg"/></button>

        <button id="print-button" onclick="downloadPNG()">Print as PNG</button>

        <div id="selection-container">
            <div id="site-container" class="leaflet-container select-container">
                <label for="site">Site</label>
                <select id="site"></select>
            </div>
            <div id="view-container" class="leaflet-container select-container">
                <label for="view">View</label>
                <select id="view"></select>
            </div>
        </div>
    </main>
</body>
<script>
    const compute_services = new Set(["CE", "Submit Node", "Connect", "GUMS Server", "Glidein factory", "VOMS Server", "Execution Endpoint"]);
    const storage_services = new Set(["Squid", "SRMv2", "XRootD cache server", "GridFtp", "XRootD component", "XRootD origin server", "SRMv1", "LFC", "Apache Server", "FTS"]);
    const network_services = new Set(["net.perfSONAR.Bandwidth", "net.perfSONAR.Latency"]);
    const ospool_resources = new Set([
        "SU-ITS-CE3", "Expanse-PATH-EP", "SU-ITS-CE2", "Lancium-PEP", "UNL-PATH-EP", "UConn-HPC", "SDSC-PRP-OSPool-Provisioner", "IU-Jetstream2-Backfill", "Lancium-Backfill", "WISC-PATH-EP", "GPGrid", "MWT2", "GLOW", "Purdue-Geddes", "Lehigh - Hawk", "UW-IT", "NWICG_NDCMS", "UColorado_HEP", "TACC-Jetstream-Backfill", "UConn-OSG", "GPN-GP-ARGO-Backfill", "AMNH-Mendel-CE1", "BNL-ATLAS", "TCNJ-ELSA", "CUmulus-Backfill", "AMNH-HEL-CE1", "Rice-RAPID-Backfill", "OSG_US_FSU_HNPGRID", "GP-ARGO-wichita-backfill", "SDSC-PRP-CE1", "UA-HPC-CE1", "VU-AUGIE", "SIUE-CC-production", "GP-ARGO-dsu-backfill", "SLATE_US_NMSU_DISCOVERY", "UC-Denver-CE1", "UTC-Epyc", "Crane", "AGLT2", "GP-ARGO-uams-backfill", "SYRA-PATH-EP", "GP-ARGO-oru-backfill", "USCMS-FNAL-WC1", "GP-ARGO-sdsmt-backfill", "GP-ARGO-sdsu-backfill", "GP-ARGO-astate-backfill", "GP-ARGO-usd-backfill", "Georgia_Tech_PACE_CE_2", "GP-ARGO-ksu-backfill", "GP-ARGO-emporia-backfill", "Rhodes-HPC-CE1", "Swan-CE1", "GP-ARGO-langston-backfill", "GP-ARGO-uark-backfill", "GP-ARGO-creighton-backfill", "ODU-Ubuntu", "LSUHSC-Tigerfish-CE1", "WTAMU_HPC", "ASU-DELL_M420", "GP-ARGO-mst-backfill", "GP-ARGO-ku-backfill", "uprm-cms", "WSU-GRID", "USC-CARC-Artemis-Backfill", "FANDM-ITS", "Clarkson-ACRES-CE2", "NMSU-Discovery-CE1", "LC-ITS", "Rhino", "UA-LR-ITS-EP", "PDX-Coeus-CE1", "GP-ARGO-osu-backfill", "Nebraska", "cinvestav", "ISI", "Purdue-Anvil-Composable", "GP-ARGO-kanren-backfill", "GSU-ACIDS", "Clemson-Palmetto", "LSUHSC-Tigerfish-CE2", "AMNH-ARES-CE1", "GP-ARGO-doane-backfill", "LSU-DB-CE1", "CHTC", "CHTC-canary2", "NMSU-Discovery", "KSU-Beocat-CE1", "WSU-GRID-CE1", "GP-ARGO-cameron-backfill", "SPRACE", "ND_CAMLGPU", "CYBERA_EDMONTON", "UMissHEP", "USF", "Maine-ACG", "Clarkson-ACRES", "FIU-PATH-BACKFILL", "GP-ARGO-semo-backfill", "AMNH-ARES", "FIU-IRCC", "Alabama-CHPC-CE1", "TIGER-OSG-BACKFILL-PROD", "CIT_CMS_T2", "UCR-HPCC-CE1", "Tufts-Cluster", "Purdue-Anvil-CE1", "IIT_CE2", "IIT_CE1", "CHTC-GPU-EP", "Maine-ACG-CE1", "NCSU-HPC-CE1", "SLATE_US_UUTAH_LONEPEAK", "USC-CARC-Carina-Backfill", "SLATE_US_UUTAH_NOTCHPEAK", "ISI_ImageTest", "SLATE_US_UUTAH_KINGSPEAK", "Wilson Facility"
    ].map(x => x.toLowerCase()))

    const iconConfig = {
        iconSize: [36,36],
        iconAnchor: [18, 36],
        popupAnchor: [0,-36],
        shadowUrl: "/static/images/map/small_shadow.svg",
        shadowAnchor: [12,30],
        shadowSize: [24,24]
    }

    const originIcon = L.icon({iconUrl: "/static/images/map/origin.svg", ...iconConfig})
    const cacheIcon = L.icon({iconUrl: "/static/images/map/cache.svg", ...iconConfig})
    const blueStarIcon = L.icon({iconUrl: "/static/images/map/star_blue.svg", ...iconConfig})
    const redStarIcon = L.icon({iconUrl: "/static/images/map/star_red.svg", ...iconConfig})
    const greenStarIcon = L.icon({iconUrl: "/static/images/map/star_green.svg", ...iconConfig})
    const purpleStarIcon = L.icon({iconUrl: "/static/images/map/star_purple.svg", ...iconConfig})
    const cacheAndOriginIcon = L.icon({
        iconUrl: "/static/images/map/cache_and_origin.svg",
        iconSize: [42,42],
        iconAnchor: [21, 42],
        popupAnchor: [0, -42],
        shadowUrl: "/static/images/map/large_shadow.svg",
        shadowAnchor: [12,30],
        shadowSize: [24,24]
    })

    let shownOspoolContributors = new Set()

    downloadPNG = async () => {
        document.getElementsByClassName("leaflet-control-zoom")[0].hidden = true

        // You have to run it twice - https://github.com/tsayen/dom-to-image/issues/343
        let dataUrl = await domtoimage.toPng(document.getElementById("print-region"))
        dataUrl = await domtoimage.toPng(document.getElementById("print-region"))

        let link = document.createElement('a');
        link.download = 'OSG_Map.png';
        link.href = dataUrl;
        link.click();

        document.getElementsByClassName("leaflet-control-zoom")[0].hidden = false
    }

    toggleFullscreen = async () => {
        document.getElementById("main").requestFullscreen()
    }

    class Resource {
        constructor({Active, Description, Disable, FQDN, ID, IsCCStar, Name, Services, Tags, ResourceGroupName, ...props}) {
            this.active = Active;
            this.description = Description;
            this.disable = Disable;
            this.FQDN = FQDN;
            this.id = ID;
            this.isCCStar = IsCCStar;
            this.name = Name;
            this.services = Services?.Service;
            this.tags = Tags;
            this.resourceGroupName = ResourceGroupName;
            this.isEDU = this.calcIsEDU();
            this.isCompute = this.calcIsCompute();
            this.isStorage = this.calcIsStorage()
            this.isNetwork = this.calcIsNetwork();
            this.isOSDFCache = this.calcIsOSDFCache();
            this.isOSDFOrigin = this.calcIsOSDFOrigin();
        }

        calcIsEDU () {
            return this.FQDN.endsWith(".edu")
        }

        calcIsCompute () {
            return this.services.some(({Name: name}) => compute_services.has(name))
        }

        calcIsStorage () {
            return this.services.some(({Name: name}) => storage_services.has(name))
        }

        calcIsNetwork () {
            return this.services.some(({Name: name}) => network_services.has(name))
        }

        calcIsOSDFCache () {
            return this.services.some(({Name: name}) => name === "XRootD cache server")
        }

        calcIsOSDFOrigin () {
            return this.services.some(({Name: name}) => name === "XRootD origin server")
        }
    }

    class Site {

        constructor({
            Resources: { Resource : resources },
            Site: { Latitude, Longitude, Name : siteName },
            Facility: { Name: facilityName },
            GroupName: resourceGroupName
        }) {
            this.resources = {}
            this.resourceGroups = {}
            this.latitude = Latitude
            this.longitude = Longitude
            this.name = siteName
            this.facilityName = facilityName
            this.siteName = siteName
            this.addResourceGroup({ Resources: { Resource : resources }, GroupName: resourceGroupName })
        }

        addResourceGroup({
            Resources: { Resource : resources },
            GroupName: resourceGroupName
        }) {
            resources = resources.map(x => new Resource({...x, ResourceGroupName: resourceGroupName}))
            this.resourceGroups[resourceGroupName] = resources
            for(let resource of resources){
                this.resources[resource.name] = resource
            }
        }

        getMarker(view) {
            let icon;

            if(view === "ComputevsStorage"){
                if(this.isCompute && this.isStorage){
                    icon = greenStarIcon
                } else if(this.isCompute){
                    icon = blueStarIcon
                } else if(this.isStorage){
                    icon = purpleStarIcon
                }

            } else if(view === "EduvsOther"){
                if(this.isEDU){
                    icon = blueStarIcon
                } else {
                    icon = greenStarIcon
                }

            } else if(view === "CCStar"){
                if(this.isCCStar){
                    icon = redStarIcon
                }

            } else if(view === "OpenScienceDataFederation") {
                if (this.isOSDFOrigin && this.isOSDFCache) {
                    icon = cacheAndOriginIcon
                } else if (this.isOSDFOrigin) {
                    icon = originIcon
                } else if (this.isOSDFCache) {
                    icon = cacheIcon
                }

            } else if(view === "OSPool"){
                if (this.isOSPool){
                    icon = greenStarIcon
                }

            } else {
                icon = greenStarIcon
            }

            if(!icon){
                return null
            }

            this.marker = L.marker([this.latitude, this.longitude], {icon: icon}).bindPopup(this.getDisplayHTML(view));
            this.marker.site = this

            this.popup = this.marker.getPopup()
            this.popup.site = this

            return this.marker
        }

        get services() {
            if( !this._services ){
                this._services = Object.values(this.resources).flatMap( resource => resource?.Services?.Service ? resource?.Services?.Service : [] )
            }
            return this._services
        }

        getDisplayHTML(view) {
            let container = document.createElement("div")
            container.classList.add("popup")

            let header_site = document.createElement("h4")
            header_site.textContent = this.siteName
            header_site.classList.add("site-card-header")
            container.appendChild(header_site)

            let header_facility = document.createElement("h5")
            header_facility.textContent = this.facilityName
            header_facility.classList.add("facility-card-header")
            container.appendChild(header_facility)

            container.appendChild(document.createElement("hr"))

            for(const [resourceGroupName, resourceGroupResources] of Object.entries(this.resourceGroups)){

                // Check if the rg has any resources to show
                if(!resourceGroupResources.some(x => this.showResourceInView(x,view))){
                    continue;
                }

                let resourceGroupNode = document.createElement("h4")
                resourceGroupNode.innerText = "Resource Group: " + resourceGroupName
                resourceGroupNode.classList.add("resource-group-header")
                container.appendChild(resourceGroupNode)

                for(const resource of resourceGroupResources){

                    // Check if the rg has any resources to show
                    if(!this.showResourceInView(resource,view)){
                        continue;
                    }

                    let resourceContainerNode = document.createElement("div")
                    resourceContainerNode.classList.add("resource-container")

                    if(view === "ComputevsStorage"){
                        resourceContainerNode.classList.add(resource.isCompute ? "compute" : "storage")
                    }

                    let imgNode = document.createElement("img")
                    imgNode.src = "/static/images/map/server_simple.svg"
                    imgNode.alt = "Image of Server"

                    let resourceNode = document.createElement("span")
                    resourceNode.innerText = resource?.name
                    resourceNode.classList.add("resource-header")

                    resourceContainerNode.appendChild(imgNode)
                    resourceContainerNode.appendChild(resourceNode)

                    container.appendChild(resourceContainerNode)
                }
            }

            return container
        }

        showResourceInView(resource, view){
            if(view === "ComputevsStorage"){
                return resource.isStorage || resource.isCompute
            } else if(view === "CCStar"){
                return resource.isCCStar
            } else if(view === "OpenScienceDataFederation") {
                return resource.isOSDFCache || resource.isOSDFOrigin
            } else if(view === "OSPool"){
                return this.resourceIsInOSPool(resource)
            }

            return true;
        }


        get isCCStar() {
            return Object.values(this.resources).some(x => x.isCCStar)
        }

        get isEDU() {
            return Object.values(this.resources).some(x => x.isEDU)
        }

        get isCompute() {
            return Object.values(this.resources).some(x => x.isCompute)
        }

        get isStorage() {
            return Object.values(this.resources).some(x => x.isStorage)
        }

        get isNetwork() {
            return Object.values(this.resources).some(x => x.isNetwork)
        }

        get isOSDFCache() {
            return Object.values(this.resources).some(x => x.isOSDFCache)
        }

        get isOSDFOrigin(){
            return Object.values(this.resources).some(x => x.isOSDFOrigin)
        }

        get isOSPool () {
            if(Object.values(this.resources).some(x => this.resourceIsInOSPool(x))){
                shownOspoolContributors.add(this.name)
                console.log(shownOspoolContributors)
            }
            return Object.values(this.resources).some(x => this.resourceIsInOSPool(x))
        }

        resourceIsInOSPool (resource) {
            // If this resource is in the ospool_resources list
            return ospool_resources.has(resource.name.toLowerCase()) ||

                // If this resourceGroup is in the list, and no resources are named that groupname
                (
                    !(resource.resourceGroupName in this.resources) &&
                    ospool_resources.has(resource.resourceGroupName.toLowerCase())

                // If this resources Site name is in the list, and no resources have this Site name
                ) || (
                    !(this.siteName in this.resources) &&
                    ospool_resources.has(this.siteName.toLowerCase())
                )
        }
    }

    class Map {

        constructor() {

            // Defaults
            let latitude = 38.96
            let longitude = -92.37
            let zoom = 4

            // Check for zoom and location inputs
            if(window.location.hash){
                let viewportComponents = window.location.hash.split("#")[1].split("|");
                [latitude, longitude] = viewportComponents[0].split(',')
                zoom = viewportComponents[1]
            }

            // Initialize the map
            this.map = L.map('map').setView([latitude, longitude], zoom);
            L.tileLayer('https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token={accessToken}', {
                attribution: 'Map data &copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors, Imagery © <a href="https://www.mapbox.com/">Mapbox</a>',
                maxZoom: 18,
                id: 'mapbox/satellite-streets-v12',
                tileSize: 512,
                zoomOffset: -1,
                accessToken: 'pk.eyJ1IjoidGFraW5nZHJha2UiLCJhIjoiY2wya3IyZGNvMDFyOTNsbnhyZjBteHRycSJ9.g6tRaqN8_iJxHgAQKNP6Tw'
            }).addTo(this.map);

            // Initialize the legend nodes
            this.legendNode = document.getElementById("legend")
            this.legendItemsNode = document.getElementById("legend-items")
        }

        _updateLegend(legend, layer) {
            this.legendNode.hidden = false

            while (this.legendItemsNode.firstChild) {
                this.legendItemsNode.removeChild(this.legendItemsNode.firstChild)
            }

            Object.entries(legend).forEach(([iconLabel, iconUrl]) => {
                let entryContainerNode = document.createElement("div")
                entryContainerNode.classList.add("entry-container")
                this.legendItemsNode.appendChild(entryContainerNode)

                let imgContainer = document.createElement("div")
                imgContainer.classList.add("legend-image-container")

                let imgNode = document.createElement("img")
                imgContainer.appendChild(imgNode)

                let labelContainer = document.createElement("div")
                labelContainer.classList.add("label-container")

                let labelNode = document.createElement("span")
                labelNode.classList.add("label-node")

                let countNode = document.createElement("span")
                countNode.classList.add("count-node")

                entryContainerNode.appendChild(imgContainer)
                labelContainer.append(labelNode)
                labelContainer.appendChild(countNode)
                entryContainerNode.appendChild(labelContainer)


                imgNode.src = iconUrl
                imgNode.alt = "Icon for " + iconLabel

                labelNode.innerText = iconLabel

                // Count values in layer that match iconUrl with current legend item
                // In this case iconUrl is a proxy for Site Category
                let siteCount = Object.values(layer._layers)
                    .reduce((og, v) => {
                        if(v.options.icon.options.iconUrl === iconUrl){
                            return og + 1
                        } else {
                            return og
                        }
                    }, 0)

                let institutionCount = Object.values(layer._layers)
                    .reduce((og, v) => {
                        if(v.options.icon.options.iconUrl === iconUrl){
                            og.push(v?.site?.facilityName)
                        }
                        return og
                    }, [])

                countNode.innerText = `${siteCount} Sites, ${new Set(institutionCount).size} Institutions`
            })

            this.legendNode.hidden = false
        }

        _updateLayer(layer) {
            // Remove previous layer
            if (this.currentLayer) {
                this.map.removeLayer(this.currentLayer)
            }

            // Update to new layer
            this.currentLayer = layer
            this.currentLayer.addTo(this.map)
        }

        update(layer, legend) {
            this._updateLayer(layer)
            this._updateLegend(legend, layer)
        }
    }

    class Select {
        constructor(id) {
            this.node = document.getElementById(id)
        }

        addOptions(options) {
            // Remove previous options
            while(this.node.firstChild){
                this.node.removeChild(this.node.firstChild)
            }
            // Add new options
            options.forEach(([value, text]) => {
                let optionNode = document.createElement("option")
                optionNode.value = value
                optionNode.innerText = text
                this.node.appendChild(optionNode)
            })
        }
    }


    class SitemapPage {

        constructor() {

            this.metaData = {
                "OSGSites" : {
                    "longText" : "OSG Sites",
                    "legend" : {
                        "OSG Site": greenStarIcon?.options?.iconUrl,
                    }
                },
                "ComputevsStorage" : {
                    "longText" : "Compute and Storage",
                    "legend" : {
                        "Compute Only": blueStarIcon?.options?.iconUrl,
                        "Storage Only": purpleStarIcon?.options?.iconUrl,
                        "Compute And Storage": greenStarIcon?.options?.iconUrl,
                    }
                },
                "EduvsOther" : {
                    "longText" : "EDU sites and others",
                    "legend" : {
                        "EDU Site": blueStarIcon?.options?.iconUrl,
                        "Others": greenStarIcon?.options?.iconUrl,
                    }
                },
                "CCStar" : {
                    "longText" : "CC* Sites",
                    "legend" : {
                        "CC* Site": redStarIcon?.options?.iconUrl
                    }
                },
                "OpenScienceDataFederation" : {
                    "longText" : "Open Science Data Federation",
                    "legend" : {
                        "Origin": originIcon?.options?.iconUrl,
                        "Cache": cacheIcon?.options?.iconUrl,
                        "Cache and Origin": cacheAndOriginIcon?.options?.iconUrl,
                    }
                },
                "OSPool" : {
                    "longText" : "OSPool Contributors",
                    "legend" : {
                        "OSPool Contributor" : greenStarIcon?.options?.iconUrl
                    }
                }
            }

            this.leafletMap = new Map()
            this.leafletMap.map.on("popupopen", (e) => {
                console.log("Pop Opened")

                this.siteSelect.value = e.popup.site.siteName

                // Default is opening '#close' which breaks url paramaters
                for(let x of document.getElementsByClassName("leaflet-popup-close-button")){
                    x.setAttribute("href", "javascript:void(0)")
                }

            })

            this.viewSelect = new Select("view")
            this.viewSelect.addOptions(
                Object.entries(this.metaData).map(([key, value]) => [key, value?.longText])
            )
            this.viewSelect.node.value = this.view
            this.viewSelect.node.addEventListener("change", () => {
                history.pushState({"data": "data"}, "", "/map/iframe?view=" + this.viewSelect.node.value)
                this.update()
            })

            this.siteSelect = new Select("site")
            this.siteSelect.node.addEventListener("change", () => {
                this.sites[this.siteSelect.node.value].marker.openPopup()
            })

            this.layers = {}

            this.fetchSites()
        }

        get view() {
            let searchParams = new URLSearchParams(window.location.search);
            return searchParams.get("view") ? searchParams.get("view") : "OSGSites"
        }

        get layer(){
            if( !(this.view in this.layers) ){
                this.layers[this.view] = L.layerGroup(this.markers)
            }
            return this.layers[this.view]
        }

        get markers() {
            return Object.entries(this.sites).map(([name, site]) => site.getMarker(this.view)).filter(icon => icon !== null)
        }

        update() {
            this.siteSelect.addOptions(
                Object.values(this.layer._layers)
                    .map(({ site })=> [site.siteName, `${site.facilityName} - ${site.siteName}`])
                    .sort((a, b) => a[1].localeCompare(b[1]))
            )
            this.leafletMap.update(this.layer, this.metaData[this.view].legend)
        }

        async fetchSites() {
            let response = await fetch("/api/resource_group_summary")
            let resourceGroupJson = await response.json()

            // Filter out inactive resources and resource groups with only inactive resources
            let activeResourceGroupJson = Object.entries(resourceGroupJson).reduce((o, [k,rg]) => {
                let activeResources = rg["Resources"]["Resource"].filter(x => x['Active'])
                if(activeResources.length && rg['Production']){
                    rg["Resources"]["Resource"] = activeResources
                    o[k] = rg
                }
                return o
            }, {})

            let sites = {}
            Object.entries(activeResourceGroupJson).forEach(([key, value]) => {
                if(value?.Site?.Name in sites){
                    sites[value?.Site?.Name].addResourceGroup(value)
                } else {
                    sites[value?.Site?.Name] = new Site(value)
                }
            })

            this.sites = sites
            this.update()
        }
    }

    const page = new SitemapPage()
</script>
</html>




